service: serverless-lambda

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        - "arn:aws:s3:::promo-deal-bucket/*"


# you can define service wide environment variables
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  # hello:
  #   handler: src/handler.hello
  #   timeout: 30
  #   memorySize: 128
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    # events:
    #   - httpApi:
    #       path: /users
    #       method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

# User Functions
  createUser:
    handler: src/userHandler.createUser
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /users
          method: post
  updateUser:
    handler: src/userHandler.updateUser
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /users/{userId}
          method: put
  deleteUser:
    handler: src/userHandler.deleteUser
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /users/{userId}
          method: delete
  findAllUser:
    handler: src/userHandler.findAllUser
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /users
          method: get
  findUserById:
    handler: src/userHandler.findUserById
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /users/{userId}
          method: get
  verifyUser:
    handler: src/userHandler.verifyUser
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /users/verifyUser
          method: post
  uploadUserImage:
    handler: src/userHandler.uploadUserImage
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /users/uploadUserImage
          method: post
# Store Functions
  createStore:
    handler: src/storeHandler.createStore
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /stores
          method: post
  updateStore:
    handler: src/storeHandler.updateStore
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /stores/{storeId}
          method: put
  deleteStore:
    handler: src/storeHandler.deleteStore
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /stores/{storeId}
          method: delete
  findAllStore:
    handler: src/storeHandler.findAllStore
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /stores
          method: get
  findAllStoreByGroup:
    handler: src/storeHandler.findAllStoreByGroup
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /stores
          method: get
  findStoreById:
    handler: src/storeHandler.findStoreById
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /stores/{storeId}
          method: get
  findStoreByName:
    handler: src/storeHandler.findStoreByName
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /stores/getStoreByName/{name}
          method: get

# Deal Functions
  createDeal:
    handler: src/dealHandler.createDeal
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /deals
          method: post
  updateDeal:
    handler: src/dealHandler.updateDeal
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /deals/{dealId}
          method: put
  deleteDeal:
    handler: src/dealHandler.deleteDeal
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /deals/{dealId}
          method: delete
  findAllDeal:
    handler: src/dealHandler.findAllDeal
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /deals
          method: get
  findDealById:
    handler: src/dealHandler.findDealById
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /deals/{dealId}
          method: get
  findDealByStore:
    handler: src/dealHandler.findDealByStore
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /deals/getDealsByStore/{storeId}
          method: get

# Subscription Functions
  createSubscription:
    handler: src/subscriptionHandler.createSubscription
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /subscriptions
          method: post
  updateSubscription:
    handler: src/subscriptionHandler.updateSubscription
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /subscriptions/{subscriptionId}
          method: put
  deleteSubscription:
    handler: src/subscriptionHandler.deleteSubscription
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /subscriptions/{subscriptionId}
          method: delete
  findAllSubscription:
    handler: src/subscriptionHandler.findAllSubscription
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /subscriptions
          method: get
  findSubscriptionById:
    handler: src/subscriptionHandler.findSubscriptionById
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /subscriptions/{subscriptionId}
          method: get
  findSubscriptionByUser:
    handler: src/subscriptionHandler.findSubscriptionByUser
    timeout: 30
    memorySize: 128
    events:
      - httpApi:
          path: /subscriptions/getSubscriptionsByUser/{userId}
          method: get


#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
